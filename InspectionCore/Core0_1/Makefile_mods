
$(info OS:${OS})
$(info XXXX:${XXXX})


ifeq ($(OS),Windows_NT)
	export platform=win_x64
	FLAGS+= -static -static-libgcc -static-libstdc++ -lws2_32
else
	LIBS+= -lz 
	export platform=mac_x64
endif



moduleRoot=../


export SO_EXPORT_PATH=$(abspath .)



# export GLEWSRCDir=$(abspath ../../$(moduleRoot)/glew-2.1.0)
# export GLFWSRCDir=$(abspath ../../$(moduleRoot)/glfw-3.2.1)
# export MODULE_GLACC=$(abspath $(moduleRoot)/GLAcc)


# target_bin=visSele
ODIR=obj
IDIR=	include/ \
			$(MODULE_acvImage)/include/ \
			$(MODULE_circleFitting) \
			$(MODULE_common_lib)/include \
			$(MODULE_cJSON) \
			$(MODULE_logctrl)/include \
			$(MODULE_MatchingEngine)/include \
			$(MODULE_MatchingEngine)/include_priv \
			$(MODULE_MatchingEngine)/MorphEngine/include \
			$(MODULE_zlib)/src \
			$(MODULE_CameraLayer)/include \
			$(MODULE_Compat_dirent)/include \
			$(MODULE_polyfit)/include \
			$(MODULE_mjpegLib)/include \
			$(MODULE_MJPEG_Streamer)/include \
			$(MODULE_BPG_Protocol)/include \
			$(MODULE_lodepng)\
			$(MODULE_smem_channel)\
			$(MODULE_shape_based_matching)/include \
      # /usr/local/include/opencv4
			# $(MODULE_DataChannel)/include\
			# $(MODULE_MLNN)/include/  \



# _OBJ = main.opp playground.opp MicroInsp_FType.opp Ext_Util_API.opp wiringPanel.opp

MLNN_OBJS=MLNNUtil.opp MLNL.opp MLNN.opp MLOpt.opp

EXT_OBJS= $(MODULE_circleFitting)/CircleFitting.a \
					$(MODULE_cJSON)/cJSON.a \
					$(MODULE_logctrl)/logctrl.a \
					$(MODULE_common_lib)/common_lib.a \
					$(MODULE_acvImage)/acvImage.a \
					$(MODULE_CameraLayer)/CameraLayer.a \
					$(MODULE_lodepng)/lodepng.a \
					$(MODULE_mjpegLib)/mjpegLib.a \
					$(MODULE_polyfit)/polyfit.a \
					$(MODULE_MJPEG_Streamer)/MJPEG_Streamer.a \
					$(MODULE_smem_channel)/smem_channel.a\
					$(MODULE_BPG_Protocol)/BPG_Protocol.a \
					$(MODULE_shape_based_matching)/libshape_based_matching.a \
					# $(MODULE_DataChannel)/DataChannel.a \
					# $(addprefix $(MODULE_MLNN)/obj/,$(MLNN_OBJS)) \
          # $(MODULE_MatchingEngine)/MatchingEngine.a \

ifeq ($(OS),Windows_NT)
	EXT_OBJS+= $(MODULE_zlib)/staticlib/libz.a 
	FLAGS+= -D_MINGW -D_WINDOWS
else
	FLAGS+=  -std=c++11
	EXT_OBJS+=
endif


ESS_TRACK=
ifeq ($(BUILDONLY),ME)
	SUB_MAKEFILES=$(MODULE_MatchingEngine)\
								$(MODULE_acvImage) \
								$(MODULE_CameraLayer) \

else ifeq ($(BUILDONLY),CL)
	SUB_MAKEFILES=$(MODULE_CameraLayer) \

else ifeq ($(BUILDONLY),TT)
	SUB_MAKEFILES=$(MODULE_BPG_Protocol)\

else ifeq ($(BUILDONLY),NONE)
	SUB_MAKEFILES=
else

	# ESS_TRACK= $(addsuffix /*.h* ,$(IDIR))
	SUB_MAKEFILES = $(MODULE_acvImage) \
									$(MODULE_common_lib) \
									$(MODULE_circleFitting) \
									$(MODULE_cJSON) \
									$(MODULE_logctrl) \
									$(MODULE_lodepng) \
									$(MODULE_CameraLayer) \
									$(MODULE_polyfit) \
									$(MODULE_mjpegLib) \
									$(MODULE_MJPEG_Streamer) \
									$(MODULE_zlib) \
									$(MODULE_smem_channel)\
									$(MODULE_BPG_Protocol)\
									# $(MODULE_shape_based_matching)\
									# $(MODULE_DataChannel) \
									# $(MODULE_SOIL) \
									# $(MODULE_GLACC) \
									# $(MODULE_MLNN) \
									# sidePrj
                  # $(MODULE_MatchingEngine) \

endif

ifeq ($(TEST),DEMO)

	_OBJ += democode.opp
endif

export MakeTemplate:= $(abspath ../Makefile.in)
STRICT_FLAGS= -Wall -Wextra -Werror -Wreturn-type -Werror=return-type


export FLAGS+= -w -O3 $(STRICT_FLAGS) $(FEATURE_FLAGS)

include $(MakeTemplate)

.PHONY:export release
export:
ifeq ($(EXPORT_PATH),)
	$(error "No EXPORT_PATH was set")
else
	-@[ ! -z "$(EXPORT_PATH)" ]&&mkdir -p $(EXPORT_PATH) || true
	cp $(target_bin)* $(EXPORT_PATH)/
	cp -r init_data $(EXPORT_PATH)/

ifeq ($(OS),Windows_NT)
else
	cp -r *.dylib $(EXPORT_PATH)/
endif

endif


domake: prepare  $(SUB_MAKEFILES) build_objs $(target_bin) $(target_a) $(target_lib)
	@echo Done GOAL:\"$(MAKECMDGOALS)\" `pwd`

release: 
	make -C $(abspath .) domake
	make -C $(abspath .) export EXPORT_PATH=$(abspath .)/../release_export/InspectionCore/$(platform)



runCMake: 
	make
